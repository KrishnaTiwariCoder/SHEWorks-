// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @map("_id")
  clerkId   String   @unique  // Clerk-authenticated ID
  email     String   @unique
  name      String?

  services  Service[] @relation("Provider")
  orders    Order[]   @relation("Customer")
  payments  Payment[] @relation(fields: [], references: [])
  receivedMessages Message[] @relation("ReceivedMessages")
  sentMessages     Message[] @relation("SentMessages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String   @id @map("_id")
  name        String
  description String
  price       Float
  creatorId   String
  creator     User?    @relation(fields: [creatorId], references: [id])
  orders      Order[]  @relation(fields: [], references: [])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id          String   @id @map("_id") 
  providerId  String
  serviceId   String
  customerId  String
  status      OrderStatus @default(PENDING)

  customer    User?    @relation("Customer" , fields: [customerId], references: [id]) 
  provider    User?    @relation("Provider" , fields: [providerId], references: [id]) 
  service     Service? @relation(fields: [serviceId], references: [id])  
  payment     Payment? @relation(fields: [], references: [])

  sentMessages Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Payment {
  id        String   @id @map("_id")
  amount    Float
  status    PaymentStatus @default(PENDING)
  orderId   String? @unique
  payerId   String

  order     Order?   @relation(fields: [orderId], references: [id])
  payer     User?    @relation(fields: [payerId], references: [id]) 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Message {
  id        String   @id @map("_id")
  senderId  String
  receiverId String
  content   String
  timestamp DateTime @default(now())

  sender    User? @relation("SentMessages",fields: [senderId], references: [id])
  receiver  User? @relation("ReceivedMessages" , fields: [receiverId], references: [id])
}
